;; -*- mode: sawfish; -*-
;; Load Modules
(require 'sawfish.wm.commands.launcher)
(require 'sawfish.wm.state.maximize)
(require 'sawfish.wm.ext.match-window)
(require 'sawfish.wm.ext.window-history)
(require 'sawfish.wm.ext.shade-hover)
(require 'sawfish.wm.util.prompt)
(require 'sawfish.wm.util.selection)
(require 'sawfish.wm.custom)
(require 'sawfish.wm.tabs.tab)
(require 'sawfish.wm.frames)
(require 'sawfish.wm.ext.auto-raise)
(require 'sawfish.wm.ext.audio-events)
(require 'sawfish.wm.util.play-audio)
(require 'sawfish.wm.commands.jump-or-exec)
(require 'sawfish.wm.ext.pager)
(require 'sawfish.wm.commands.x-cycle)
(require 'sawfish.wm.ext.workspace-grid)
;;(require 'sawfish.wm.viewport)
(require 'rep.io.timers)
(require 'sawfish.wm.menus)
;;(require 'sawflibs.xmobar)

;;(setq *use-features* '(xmobar))

(define (display-message-with-timeout message timeout)
  (display-message message)
  (make-timer (lambda () (display-message nil)) timeout))


;; display-ws-name
(defcustom display-ws-name-on-switch nil
  "Whether to display workspace name upon switch"
  :type boolean
  :group workspace
  :after-set (lambda () (display-ws-name-setter)))

(defcustom display-ws-name-timeout 2
  "How long to display workspace name"
  :type number
  :group workspace)

(define (display-workspace-name)
  (display-message-with-timeout
   (format nil "Now on Workspace: %s"
           (or (nth current-workspace workspace-names)
               (format nil (_ "Workspace %d") (1+ current-workspace))))
   display-ws-name-timeout))

(define (display-ws-name-setter)
  (if (eq display-ws-name-on-switch 't)
      (add-hook 'enter-workspace-hook display-workspace-name)
    (remove-hook 'enter-workspace-hook display-workspace-name)))

(define-command 'display-workspace-name display-workspace-name #:class 'default)

;; view-clipboard

(defcustom clipboard-preview-clip-length 600
  "Maximum length of Clipboard Preview"
  :type number
  :group misc)

(defcustom clipboard-preview-timeout 15
  "How long to display Clipboard Preview"
  :type number
  :group misc)

(define (view-clipboard)
  "Show the contents of the clipboard in a message window"
  (let ((c (x-get-selection 'PRIMARY)))
    (if (> (length c) 0)
        (if (< (length c) clipboard-preview-clip-length)
            (display-message-with-timeout c clipboard-preview-timeout)
          (display-message-with-timeout
           (format nil "%s ..." (substring c 0 clipboard-preview-clip-length))
           clipboard-preview-timeout)))))

;; iconify-all-windows
(define (iconify-all-windows)
  (map-windows iconify-window))

(define-command 'iconify-all-windows iconify-all-windows)

;; close-all-windows

(define (close-all-windows)
  (map-windows delete-window))

(define-command 'close-all-windows close-all-windows)

;; Window Matchers
(add-window-matcher 'WM_CLASS "Pidgin/Pidgin" '(depth . 0))
(add-window-matcher 'WM_CLASS "Skype/skype" '(depth . 0))

( add-window-matcher '( ( WM_CLASS . "^Gnome-terminal/sawfishpager$" ) )
       '( ( position . north-east )
          ( fixed-positon . t )
          ( never-maximize . t )
          ( never-iconify . t )
          ( frame-type . none )
          ( cycle-skip . t )
          ( window-list-skip . t )
          ( sticky . t )
          ( sticky-viewport . t )
	  ( avoid . () ) ) )

;; Create a window with name
(defvar-setq last-created-window nil)
(add-hook 'after-add-window-hook
	  (lambda (current)
	    (setq last-created-window current)))

(define (wl-exec-with-name cmd name #!optional ws-name func)
  "If ws-name is provided, put the newly created window to workspace with name ws-name
If FUNC is non-nil, call FUNC after the rename of newly created window."
  (system (concat cmd " &"))
  (make-timer (lambda ()
		(if ws-name
		    (let ((ws-idx (str-idx-in-lst ws-name workspace-names)))
		      (when ws-idx
			(send-window-to-workspace-from-first last-created-window ws-idx nil 'select))))
		(rename-window last-created-window name)
		(funcall func last-created-window)) 1))

(define-command 'wl-exec-with-name wl-exec-with-name)

;; get-frame-width

( define ( get-frame-width w )
  (let ((dims (window-dimensions w))
	(frame (window-frame-dimensions w)))
    (- (car frame) (car dims))))

;;â€ƒget-frame-height

( define ( get-frame-height w )
  (let ((dims (window-dimensions w))
	(frame (window-frame-dimensions w)))
    (- (cdr frame) (cdr dims))))

;; resize-window-half-screen-width

( define ( resize-window-half-screen-width w )
  (let ((height (cdr (window-dimensions w)))
	(half-width (/ (screen-width) 2))
	(frame-width (get-frame-width w)))
  (resize-window-with-hints* w (- half-width frame-width) frame-width)))

( define-command 'resize-window-half-screen-width resize-window-half-screen-width #:spec "%W" )

;; resize-window-half-screen-height

(define ( resize-window-half-screen-height w )
  (let ((width (car (window-dimensions w)))
	(half-height (/ (screen-height) 2))
	(frame-height (get-frame-height w)))
    (resize-window-with-hints* w width (- half-height frame-height))))

(define-command 'resize-window-half-screen-height resize-window-half-screen-height #:spec "%W")

(define (my-toggle-show-hide-desktop)
  "Toggle showing or hiding desktop."
  (if (showing-desktop-p)
      (hide-desktop)
    (show-desktop)))

(define-command 'my-toggle-show-hide-desktop my-toggle-show-hide-desktop)


;; Workapaces
(defvar-setq workspace-names '("Work" "Web" "Mail" "Lisp" "Media" "Chat" "Misc"))

;; change to corresponding workspace
(bind-keys global-keymap "W-1" '(activate-workspace 1))
(bind-keys global-keymap "W-2" '(activate-workspace 2))
(bind-keys global-keymap "W-3" '(activate-workspace 3))
(bind-keys global-keymap "W-4" '(activate-workspace 4))
(bind-keys global-keymap "W-5" '(activate-workspace 5))
(bind-keys global-keymap "W-6" '(activate-workspace 6))
(bind-keys global-keymap "W-7" '(activate-workspace 7))

;; Workspace Keymacros
(define ws-keymap (make-keymap))
(bind-keys global-keymap "W-w" ws-keymap)

(bind-keys ws-keymap
	   "Left" workspace-left
	   "Right" workspace-right
	   "1" '(send-to-workspace 1)
	   "2" '(send-to-workspace 2)
	   "3" '(send-to-workspace 3)
	   "4" '(send-to-workspace 4)
	   "5" '(send-to-workspace 5)
	   "6" '(send-to-workspace 6)
	   "7" '(send-to-workspace 7))

;;; switch to last workspace or window using W-`
(define window-or-workspace? 'window)
(add-hook 'leave-workspace-hook
          (lambda (current)
            (setq workspace-last current)
            (setq window-or-workspace? 'workspace)))

(add-hook 'focus-out-hook
          (lambda (current)
            (setq window-last current)
            (setq window-or-workspace? 'window)))

(bind-keys global-keymap
    "W-`"
    (lambda ()
      (if (eq window-or-workspace? 'workspace)
          (select-workspace workspace-last)
        (display-window window-last))))


(define (my-jump-or-exec pred func)
  "Jump to a window win with (funcall pred win) true, or exec (funcall func)"
  (let ((win (catch 'find
	       (mapc (lambda (w)
		       (when (funcall pred w)
			 (throw 'find w)))
		     (managed-windows))
	       nil)))
    (if win
	(display-window win)
      (funcall func))))

(define-command 'my-jump-or-exec my-jump-or-exec)

(define (my-jump-or-exec-in-ws ws regex prog #!key match-class)
  "Jump to a window in workspace WS, or when absent, start program."
  (let ((ws-idx (str-idx-in-lst ws workspace-names)))
    (when ws-idx
      (select-workspace-from-first ws-idx))
    (let* ((wins (workspace-windows current-workspace 'include-iconified))
	   (win (catch 'find
		  (mapc (lambda (w)
			  (let ((rlt (if match-class
					 (string-match regex (window-class w))
				       (string-match regex (window-name w)))
				     ))
			    (when rlt
			      (throw 'find w))))
			wins)
		  nil)))
      (if win
	  (display-window win)
	(system (concat prog "&"))))))

(define-command 'my-jump-or-exec-in-ws my-jump-or-exec-in-ws)


;; Global Keybindings
;; FIXME
;; "W-" keys should be only for those used heavily keys
;; And the W-C-/W-S- keys should be consistent
;; - control other things
;; - control windows
;; - control workspaces
(bind-keys global-keymap
	   "W-C-r" 'restart
	   "W-C-F12" 'quit
	   "W-C-a" 'view-clipboard
	   "W-C-d" 'my-toggle-show-hide-desktop
	   "W-C-z" '(system "xscreensaver-command -lock &")
	   "W-C-i" 'iconfiy-all-windows
	   "W-TAB" 'cycle-windows
	   "C-TAB" 'cycle-windows-backwards
	   "W-t" `(jump-or-exec "^Terminal" "gnome-terminal")
	   ;; normal emacs frame
	   "W-e" `(my-jump-or-exec-in-ws "Work" "Emacs" "emacs" #:match-class t)
	   ;; gnus emacs frame
	   "W-g" `(jump-or-exec "^Gnus@Emacs" "emacs")
	   "W-f" `(jump-or-exec "Mozilla Firefox" "firefox")
	   ;; Twitter emacs frame
	   "W-i" `(my-jump-or-exec-in-ws "Chat" "Emacs" "emacs" #:match-class t)
	   ;; Lisp dev emacs frame
	   "W-l" `(my-jump-or-exec-in-ws "Lisp" "Emacs" "emacs" #:match-class t)
	   "W-m" '(my-jump-or-exec-in-ws "Mail" "Evolution" "evolution" #:match-class t)
	   "W-F9" 'run-shell-command
	   "W-F10" `(jump-or-exec "^pwrgrp100" "gnome-terminal")
	   "W-F11" `(jump-or-exec "shell@power102" '(wl-exec-with-name "gnome-terminal" "shell@power102" "Work"
								       (lambda ()
									 (mapcar (lambda (e)
										   (synthesize-event e last-created-window))
										 '("s" "a" "p" "RET")))))
	   "W-F12" `(jump-or-exec "emacs@power102" '(wl-exec-with-name "gnome-terminal" "emacs@power102" "Work"
								       (lambda ()
									 (mapcar (lambda (e)
										   (synthesize-event e last-created-window))
										 '("s" "a" "p" "RET")))))
	   "C-S-q" 'close-all-windows)

;; Window Keybindings
(unbind-keys window-keymap "Button1-Click")

;; Rootwindow Keybindings
(bind-keys root-window-keymap
	   "Button2-Click" 'popup-window-list-menu
	   "Button3-Click" 'popup-root-menu )

;; Application Keymacros
;; All application keys start with W-a, a means application
(define apps-keymap (make-keymap))
(bind-keys global-keymap "W-a" apps-keymap)

(bind-keys apps-keymap
	   "m" `(jump-or-exec "Evolution$" "evolution")
	   "q" `(jump-or-exec "QTerm" "qterm")
	   "v" `(jump-or-exec "Remote Desktop Viewer" "vinagre") 	   ;; VNC viewer
	   "V" `(jump-or-exec "VirtualBox" "VirtualBox")
	   "p" `(jump-or-exec "PuTTY" "putty")
	   "s" `(jump-or-exec "Skype" "skype")
	   "a" `(jump-or-exec "Adobe Reader$" "acroread")
	   "g" `(jump-or-exec "Google Chrome" "google-chrome")
	   )

;; Window Keybindings
(bind-keys window-keymap
	   "W-S-c" 'delete-window-safely
	   "C-W-m" 'maximize-window
	   "C-W-w" 'unmaximize-window
	   "C-W-s" 'shade-window
	   "C-W-u" 'unshade-window
	   "C-W-i" 'iconify-window
;	   "C-W-r" 'raise-window
	   "C-W-l" 'lower-window
	   "C-W-R" 'raise-window-depth
	   "C-W-L" 'lower-window-depth
	   "C-W-f" 'maximize-window-fullscreen
	   "C-W-v" 'maximize-window-vertically
	   "C-W-h" 'maximize-window-horizontally
	   "C-W-y" 'move-window-interactively
	   "C-W-x" 'resize-window-interactively
	   "C-S-r" 'rename-window
	   "C-S-c" 'move-window-center
	   "C-S-h" 'halve-window-size
	   "C-S-d" 'double-window-size
	   "C-S-e" 'resize-window-half-screen-height
	   "C-S-w" 'resize-window-half-screen-width 
	   )

;; Display Workspace Name
(defvar-setq display-ws-name-on-switch t)
(defvar-setq display-ws-name-timeout 3)

(display-ws-name-setter)

;; XTerm & Browser
( defvar-setq xterm-program "gnome-terminal" )
( defvar-setq browser-program "firefox" )

(defun shove-window (dir &optional no-focus)
  "Move focused window 'left, 'right, 'up or 'down to screen edges."
  (interactive)
  (let* ((win (input-focus))
         (pos (window-position win))
         (dim (window-frame-dimensions win))
         (endx (car pos))
         (endy (cdr pos)))
    (cond ((eq dir 'left) (setq endx 0))
          ((eq dir 'right) (setq endx (- (screen-width) (car dim))))
          ((eq dir 'up) (setq endy 0))
          ((eq dir 'down) (setq endy (- (screen-height) (cdr dim)))))
    (move-window-to win endx endy)
    (unless no-focus
      (display-window win))))

(bind-keys global-keymap "C-M-Left" '(shove-window 'left))
(bind-keys global-keymap "C-M-Right" '(shove-window 'right))
(bind-keys global-keymap "C-M-Up" '(shove-window 'up))
(bind-keys global-keymap "C-M-Down" '(shove-window 'down))

;; Animation [Yep, Sawfish Maintainers also are Human Beeings]

( defvar-setq default-window-animator 'wireframe )
( defvar-setq anim-outline-icon-coords '( 0 . 0 ) )
( defvar-setq anim-outline-steps 45 )
( defvar-setq anim-outline-delay 15 )
( defvar-setq move-outline-mode 'cross )
( defvar-setq resize-outline-mode 'elliptical )

;;; Window Snooping

(defvar window-snooper-timeout 15)

(define (window-snooper)
    "Display information about the focused window."
    (let* ((w (input-focus))
           (net-wm-name (get-x-text-property w '_NET_WM_NAME))
           (wm-class (get-x-text-property w 'WM_CLASS))
           (net-wm-icon-name (get-x-text-property w '_NET_WM_ICON_NAME))
           (wm-window-role (get-x-text-property w 'WM_WINDOW_ROLE))
           (wm-locale-name (get-x-text-property w 'WM_LOCALE_NAME))
           (pos (window-position w))
           (dims (window-dimensions w))
           (frame-dims (window-frame-dimensions w))
           (window-x (car pos))
           (window-y (cdr pos))
           (window-width (car dims))
           (window-height (cdr dims))
           (frame-width (- (car frame-dims) window-width))
           (frame-height (- (cdr frame-dims) window-height)))

      (display-message-with-timeout
       (format nil
               "
About the currently focused window:
===================================

_NET_WM_NAME: \t\t %s
WM_CLASS: \t\t\t %s
_NET_WM_ICON_NAME: \t %s
WM_WINDOW_ROLE: \t %s
WM_LOCALE_NAME: \t %s
Window X: \t\t\t %s pixels
Window Y: \t\t\t %s pixels
Window Width: \t\t %s pixels
Window Height: \t\t %s pixels
Frame Width: \t\t\t %s pixels
Frame Height: \t\t %s pixels

===================================\n"
               (if net-wm-name
                   (aref net-wm-name 0)
                 "")
               (concat (aref wm-class 1)
                       "/"
                       (aref wm-class 0))
               (if net-wm-icon-name
                   (aref net-wm-icon-name 0)
                 "")
               (if wm-window-role
                   (aref wm-window-role 0)
                 "")
               (if wm-locale-name
                   (aref wm-locale-name 0)
                 "")
               window-x
               window-y
               window-width
               window-height
               frame-width
               frame-height) window-snooper-timeout)))

( define-command 'window-snooper window-snooper)

( bind-keys global-keymap "C-S-s" 'window-snooper )

;;  Some programs that are used commonly
(defvar-setq my-exec-history '("emacs"
			       "gnome-terminal"
			       "pidgin"
			       "skype"
			       "qterm"
			       "gimp"
			       "evince"
			       "acroread"
			       "firefox"
			       "google-chrome"
			       "stardict"
			       "shutter")
  "List of previously executed items.")

(define (my-prompt-for-exec)
  (let ((e (prompt-from-list my-exec-history "Execute: " nil t)))
    (delete e my-exec-history)      
    (when (and e (not (string= "" e)))
      (setq my-exec-history (append (list e) my-exec-history))
      (system (concat e "&")))))

(define-command 'my-prompt-for-exec my-prompt-for-exec)
(bind-keys global-keymap "W-p" 'my-prompt-for-exec)

(define (str-idx-in-lst str lst)
  "Return the index of string STR in a list of strings LST.
Return nil if STR doesn't exist in LST."
  (let* ((idx 0)
	 (seq lst))
    (catch 'find
      (while seq
	(when (string= str (car seq))
	  (throw 'find idx))
	(setq idx (1+ idx))
	(setq seq (cdr seq))))))

(define (workspace-id name)
  "Return the workspace NAME's id, nil if there is no workspace named NAME."
  (str-idx-in-lst name workspace-names))

(define (dispatch-window-according-to-type win ws-name wm-classes)
  "Dispatch windows according to their WM_CLASS attribute.
"
  (let* ((ws-idx (workspace-id ws-name))
	 (wm-class (get-x-text-property win 'WM_CLASS))
	 (wm-class-str (concat (aref wm-class 1)
			       "/"
			       (aref wm-class 0)))
	 (match (or (and (stringp wm-classes)
			 (string= wm-class-str wm-classes))
		    ;; a list  of wm-class names
		    (and (listp wm-classes)
			 (let (find)
			   (catch 'find
			     (mapcar (lambda (nm)
				       (when (string= nm wm-class-str)
					 (setq find t)
					 (throw 'find t)))
				     wm-classes))
			   find)))))
    (when (and match ws-idx)
      (send-window-to-workspace-from-first win ws-idx nil 'select))))

(define (dispatch-window-according-to-alist win lst)
  (let* ((wm-class (get-x-text-property win 'WM_CLASS))
	 (wm-class-str (concat (aref wm-class 1)
			       "/"
			       (aref wm-class 0))))
    (catch 'ok
      (mapcar (lambda (ws-pair)
		;; check whether the workspace name exists
		(let* ((ws-idx (workspace-id (car ws-pair)))
		       (wm-classes (cdr ws-pair))
		       (match (and ws-idx
				   (or (and (stringp wm-classes)
					    (string= wm-class-str wm-classes))
				      ;; a list  of wm-class names
				      (and (listp wm-classes)
					   (let (find)
					     (catch 'find
					       (mapcar (lambda (nm)
							 (when (string= nm wm-class-str)
							   (setq find t)
							   (throw 'find t)))
						       wm-classes))
					     find))))))
		  (when match
		    (send-window-to-workspace-from-first win ws-idx nil 'select)		      
		    (throw 'ok t))))
	      lst))))

(defvar-setq my-dispatch-window-list
  '(("Chat" . ("Skype/skype" "Pidgin/Pidgin"))
    ("Web"  . ("Firefox/Navigator" "Qterm/qterm" "Google-chrome/google-chrome"))
    ("Mail" . ("Evolution/evolution"))
    ("Work" . "Putty/putty")
    ("Misc" . ("VirtualBox/Qt-subapplication"))))

(add-hook 'after-add-window-hook
	  (lambda (win)
	    (dispatch-window-according-to-alist win my-dispatch-window-list)))

;; my test functions
;; (define (test-get-window regex)
;;   (let ((win (get-window-by-name regex #:regex t)))
;;     (if win
;; 	(display-message-with-timeout (concat "find window: "
;; 					      regex) 3)
;;       (display-message-with-timeout (concat "no window named: "
;; 					    regex) 3))))
;; (test-get-window "Twitter@Emacs")
;; (test-get-window "Terminal")
;; (test-get-window "Gnus")
;; (test-get-window "Twitter")


;;(activate-xmobar "/home/velen/.xmobarrc")

